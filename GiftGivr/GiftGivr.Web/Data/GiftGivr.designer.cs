#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GiftGivr.Web.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GiftGivr")]
	public partial class GiftGivrDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertGiftAnswer(GiftAnswer instance);
    partial void UpdateGiftAnswer(GiftAnswer instance);
    partial void DeleteGiftAnswer(GiftAnswer instance);
    partial void InsertGiftQuestion(GiftQuestion instance);
    partial void UpdateGiftQuestion(GiftQuestion instance);
    partial void DeleteGiftQuestion(GiftQuestion instance);
    partial void InsertGift(Gift instance);
    partial void UpdateGift(Gift instance);
    partial void DeleteGift(Gift instance);
    #endregion
		
		public GiftGivrDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GiftGivrConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GiftGivrDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GiftGivrDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GiftGivrDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GiftGivrDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<GiftAnswer> GiftAnswers
		{
			get
			{
				return this.GetTable<GiftAnswer>();
			}
		}
		
		public System.Data.Linq.Table<GiftQuestion> GiftQuestions
		{
			get
			{
				return this.GetTable<GiftQuestion>();
			}
		}
		
		public System.Data.Linq.Table<Gift> Gifts
		{
			get
			{
				return this.GetTable<Gift>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountId;
		
		private string _Email;
		
		private string _Salt;
		
		private string _Password;
		
		private string _Name;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<GiftAnswer> _GiftAnswers;
		
		private EntitySet<GiftQuestion> _GiftQuestions;
		
		private EntitySet<Gift> _Gifts;
		
		private EntitySet<Gift> _Gifts1;
		
		private EntitySet<Gift> _Gifts2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSaltChanging(string value);
    partial void OnSaltChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Account()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._GiftAnswers = new EntitySet<GiftAnswer>(new Action<GiftAnswer>(this.attach_GiftAnswers), new Action<GiftAnswer>(this.detach_GiftAnswers));
			this._GiftQuestions = new EntitySet<GiftQuestion>(new Action<GiftQuestion>(this.attach_GiftQuestions), new Action<GiftQuestion>(this.detach_GiftQuestions));
			this._Gifts = new EntitySet<Gift>(new Action<Gift>(this.attach_Gifts), new Action<Gift>(this.detach_Gifts));
			this._Gifts1 = new EntitySet<Gift>(new Action<Gift>(this.attach_Gifts1), new Action<Gift>(this.detach_Gifts1));
			this._Gifts2 = new EntitySet<Gift>(new Action<Gift>(this.attach_Gifts2), new Action<Gift>(this.detach_Gifts2));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salt", DbType="NVarChar(MAX)")]
		public string Salt
		{
			get
			{
				return this._Salt;
			}
			set
			{
				if ((this._Salt != value))
				{
					this.OnSaltChanging(value);
					this.SendPropertyChanging();
					this._Salt = value;
					this.SendPropertyChanged("Salt");
					this.OnSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Comment", Storage="_Comments", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_GiftAnswer", Storage="_GiftAnswers", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<GiftAnswer> GiftAnswers
		{
			get
			{
				return this._GiftAnswers;
			}
			set
			{
				this._GiftAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_GiftQuestion", Storage="_GiftQuestions", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<GiftQuestion> GiftQuestions
		{
			get
			{
				return this._GiftQuestions;
			}
			set
			{
				this._GiftQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Gift", Storage="_Gifts", ThisKey="AccountId", OtherKey="ClaimedByAccountId")]
		public EntitySet<Gift> Gifts
		{
			get
			{
				return this._Gifts;
			}
			set
			{
				this._Gifts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Gift1", Storage="_Gifts1", ThisKey="AccountId", OtherKey="CreatorAccountId")]
		public EntitySet<Gift> Gifts1
		{
			get
			{
				return this._Gifts1;
			}
			set
			{
				this._Gifts1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Gift2", Storage="_Gifts2", ThisKey="AccountId", OtherKey="TargetAccountId")]
		public EntitySet<Gift> Gifts2
		{
			get
			{
				return this._Gifts2;
			}
			set
			{
				this._Gifts2.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_GiftAnswers(GiftAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_GiftAnswers(GiftAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_GiftQuestions(GiftQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_GiftQuestions(GiftQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Gifts(Gift entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Gifts(Gift entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Gifts1(Gift entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = this;
		}
		
		private void detach_Gifts1(Gift entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = null;
		}
		
		private void attach_Gifts2(Gift entity)
		{
			this.SendPropertyChanging();
			entity.Account2 = this;
		}
		
		private void detach_Gifts2(Gift entity)
		{
			this.SendPropertyChanging();
			entity.Account2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentId;
		
		private int _GiftId;
		
		private int _AccountId;
		
		private System.DateTime _Timestamp;
		
		private string _CommentText;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Gift> _Gift;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIdChanging(int value);
    partial void OnCommentIdChanged();
    partial void OnGiftIdChanging(int value);
    partial void OnGiftIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    #endregion
		
		public Comment()
		{
			this._Account = default(EntityRef<Account>);
			this._Gift = default(EntityRef<Gift>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentId
		{
			get
			{
				return this._CommentId;
			}
			set
			{
				if ((this._CommentId != value))
				{
					this.OnCommentIdChanging(value);
					this.SendPropertyChanging();
					this._CommentId = value;
					this.SendPropertyChanged("CommentId");
					this.OnCommentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiftId", DbType="Int NOT NULL")]
		public int GiftId
		{
			get
			{
				return this._GiftId;
			}
			set
			{
				if ((this._GiftId != value))
				{
					if (this._Gift.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGiftIdChanging(value);
					this.SendPropertyChanging();
					this._GiftId = value;
					this.SendPropertyChanged("GiftId");
					this.OnGiftIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CommentText
		{
			get
			{
				return this._CommentText;
			}
			set
			{
				if ((this._CommentText != value))
				{
					this.OnCommentTextChanging(value);
					this.SendPropertyChanging();
					this._CommentText = value;
					this.SendPropertyChanged("CommentText");
					this.OnCommentTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Comment", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gift_Comment", Storage="_Gift", ThisKey="GiftId", OtherKey="GiftId", IsForeignKey=true)]
		public Gift Gift
		{
			get
			{
				return this._Gift.Entity;
			}
			set
			{
				Gift previousValue = this._Gift.Entity;
				if (((previousValue != value) 
							|| (this._Gift.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gift.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Gift.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._GiftId = value.GiftId;
					}
					else
					{
						this._GiftId = default(int);
					}
					this.SendPropertyChanged("Gift");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GiftAnswers")]
	public partial class GiftAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GiftAnswerId;
		
		private int _GiftQuestionId;
		
		private int _AccountId;
		
		private System.DateTime _Timestamp;
		
		private string _QuestionAnswer;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<GiftQuestion> _GiftQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGiftAnswerIdChanging(int value);
    partial void OnGiftAnswerIdChanged();
    partial void OnGiftQuestionIdChanging(int value);
    partial void OnGiftQuestionIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnQuestionAnswerChanging(string value);
    partial void OnQuestionAnswerChanged();
    #endregion
		
		public GiftAnswer()
		{
			this._Account = default(EntityRef<Account>);
			this._GiftQuestion = default(EntityRef<GiftQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiftAnswerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GiftAnswerId
		{
			get
			{
				return this._GiftAnswerId;
			}
			set
			{
				if ((this._GiftAnswerId != value))
				{
					this.OnGiftAnswerIdChanging(value);
					this.SendPropertyChanging();
					this._GiftAnswerId = value;
					this.SendPropertyChanged("GiftAnswerId");
					this.OnGiftAnswerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiftQuestionId", DbType="Int NOT NULL")]
		public int GiftQuestionId
		{
			get
			{
				return this._GiftQuestionId;
			}
			set
			{
				if ((this._GiftQuestionId != value))
				{
					if (this._GiftQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGiftQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._GiftQuestionId = value;
					this.SendPropertyChanged("GiftQuestionId");
					this.OnGiftQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionAnswer", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string QuestionAnswer
		{
			get
			{
				return this._QuestionAnswer;
			}
			set
			{
				if ((this._QuestionAnswer != value))
				{
					this.OnQuestionAnswerChanging(value);
					this.SendPropertyChanging();
					this._QuestionAnswer = value;
					this.SendPropertyChanged("QuestionAnswer");
					this.OnQuestionAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_GiftAnswer", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.GiftAnswers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.GiftAnswers.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GiftQuestion_GiftAnswer", Storage="_GiftQuestion", ThisKey="GiftQuestionId", OtherKey="GiftQuestionId", IsForeignKey=true)]
		public GiftQuestion GiftQuestion
		{
			get
			{
				return this._GiftQuestion.Entity;
			}
			set
			{
				GiftQuestion previousValue = this._GiftQuestion.Entity;
				if (((previousValue != value) 
							|| (this._GiftQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GiftQuestion.Entity = null;
						previousValue.GiftAnswers.Remove(this);
					}
					this._GiftQuestion.Entity = value;
					if ((value != null))
					{
						value.GiftAnswers.Add(this);
						this._GiftQuestionId = value.GiftQuestionId;
					}
					else
					{
						this._GiftQuestionId = default(int);
					}
					this.SendPropertyChanged("GiftQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GiftQuestions")]
	public partial class GiftQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GiftQuestionId;
		
		private int _GiftId;
		
		private int _AccountId;
		
		private System.DateTime _Timestamp;
		
		private string _QuestionText;
		
		private EntitySet<GiftAnswer> _GiftAnswers;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Gift> _Gift;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGiftQuestionIdChanging(int value);
    partial void OnGiftQuestionIdChanged();
    partial void OnGiftIdChanging(int value);
    partial void OnGiftIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    #endregion
		
		public GiftQuestion()
		{
			this._GiftAnswers = new EntitySet<GiftAnswer>(new Action<GiftAnswer>(this.attach_GiftAnswers), new Action<GiftAnswer>(this.detach_GiftAnswers));
			this._Account = default(EntityRef<Account>);
			this._Gift = default(EntityRef<Gift>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiftQuestionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GiftQuestionId
		{
			get
			{
				return this._GiftQuestionId;
			}
			set
			{
				if ((this._GiftQuestionId != value))
				{
					this.OnGiftQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._GiftQuestionId = value;
					this.SendPropertyChanged("GiftQuestionId");
					this.OnGiftQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiftId", DbType="Int NOT NULL")]
		public int GiftId
		{
			get
			{
				return this._GiftId;
			}
			set
			{
				if ((this._GiftId != value))
				{
					if (this._Gift.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGiftIdChanging(value);
					this.SendPropertyChanging();
					this._GiftId = value;
					this.SendPropertyChanged("GiftId");
					this.OnGiftIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GiftQuestion_GiftAnswer", Storage="_GiftAnswers", ThisKey="GiftQuestionId", OtherKey="GiftQuestionId")]
		public EntitySet<GiftAnswer> GiftAnswers
		{
			get
			{
				return this._GiftAnswers;
			}
			set
			{
				this._GiftAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_GiftQuestion", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.GiftQuestions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.GiftQuestions.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gift_GiftQuestion", Storage="_Gift", ThisKey="GiftId", OtherKey="GiftId", IsForeignKey=true)]
		public Gift Gift
		{
			get
			{
				return this._Gift.Entity;
			}
			set
			{
				Gift previousValue = this._Gift.Entity;
				if (((previousValue != value) 
							|| (this._Gift.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gift.Entity = null;
						previousValue.GiftQuestions.Remove(this);
					}
					this._Gift.Entity = value;
					if ((value != null))
					{
						value.GiftQuestions.Add(this);
						this._GiftId = value.GiftId;
					}
					else
					{
						this._GiftId = default(int);
					}
					this.SendPropertyChanged("Gift");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GiftAnswers(GiftAnswer entity)
		{
			this.SendPropertyChanging();
			entity.GiftQuestion = this;
		}
		
		private void detach_GiftAnswers(GiftAnswer entity)
		{
			this.SendPropertyChanging();
			entity.GiftQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gifts")]
	public partial class Gift : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GiftId;
		
		private int _TargetAccountId;
		
		private int _CreatorAccountId;
		
		private System.Nullable<int> _ClaimedByAccountId;
		
		private string _Name;
		
		private string _PurchaseUrl;
		
		private string _Description;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<GiftQuestion> _GiftQuestions;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Account> _Account1;
		
		private EntityRef<Account> _Account2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGiftIdChanging(int value);
    partial void OnGiftIdChanged();
    partial void OnTargetAccountIdChanging(int value);
    partial void OnTargetAccountIdChanged();
    partial void OnCreatorAccountIdChanging(int value);
    partial void OnCreatorAccountIdChanged();
    partial void OnClaimedByAccountIdChanging(System.Nullable<int> value);
    partial void OnClaimedByAccountIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPurchaseUrlChanging(string value);
    partial void OnPurchaseUrlChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Gift()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._GiftQuestions = new EntitySet<GiftQuestion>(new Action<GiftQuestion>(this.attach_GiftQuestions), new Action<GiftQuestion>(this.detach_GiftQuestions));
			this._Account = default(EntityRef<Account>);
			this._Account1 = default(EntityRef<Account>);
			this._Account2 = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiftId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GiftId
		{
			get
			{
				return this._GiftId;
			}
			set
			{
				if ((this._GiftId != value))
				{
					this.OnGiftIdChanging(value);
					this.SendPropertyChanging();
					this._GiftId = value;
					this.SendPropertyChanged("GiftId");
					this.OnGiftIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetAccountId", DbType="Int NOT NULL")]
		public int TargetAccountId
		{
			get
			{
				return this._TargetAccountId;
			}
			set
			{
				if ((this._TargetAccountId != value))
				{
					if (this._Account2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetAccountIdChanging(value);
					this.SendPropertyChanging();
					this._TargetAccountId = value;
					this.SendPropertyChanged("TargetAccountId");
					this.OnTargetAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorAccountId", DbType="Int NOT NULL")]
		public int CreatorAccountId
		{
			get
			{
				return this._CreatorAccountId;
			}
			set
			{
				if ((this._CreatorAccountId != value))
				{
					if (this._Account1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorAccountIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorAccountId = value;
					this.SendPropertyChanged("CreatorAccountId");
					this.OnCreatorAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimedByAccountId", DbType="Int")]
		public System.Nullable<int> ClaimedByAccountId
		{
			get
			{
				return this._ClaimedByAccountId;
			}
			set
			{
				if ((this._ClaimedByAccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClaimedByAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ClaimedByAccountId = value;
					this.SendPropertyChanged("ClaimedByAccountId");
					this.OnClaimedByAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseUrl", DbType="NVarChar(MAX)")]
		public string PurchaseUrl
		{
			get
			{
				return this._PurchaseUrl;
			}
			set
			{
				if ((this._PurchaseUrl != value))
				{
					this.OnPurchaseUrlChanging(value);
					this.SendPropertyChanging();
					this._PurchaseUrl = value;
					this.SendPropertyChanged("PurchaseUrl");
					this.OnPurchaseUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gift_Comment", Storage="_Comments", ThisKey="GiftId", OtherKey="GiftId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gift_GiftQuestion", Storage="_GiftQuestions", ThisKey="GiftId", OtherKey="GiftId")]
		public EntitySet<GiftQuestion> GiftQuestions
		{
			get
			{
				return this._GiftQuestions;
			}
			set
			{
				this._GiftQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Gift", Storage="_Account", ThisKey="ClaimedByAccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Gifts.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Gifts.Add(this);
						this._ClaimedByAccountId = value.AccountId;
					}
					else
					{
						this._ClaimedByAccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Gift1", Storage="_Account1", ThisKey="CreatorAccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account1
		{
			get
			{
				return this._Account1.Entity;
			}
			set
			{
				Account previousValue = this._Account1.Entity;
				if (((previousValue != value) 
							|| (this._Account1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account1.Entity = null;
						previousValue.Gifts1.Remove(this);
					}
					this._Account1.Entity = value;
					if ((value != null))
					{
						value.Gifts1.Add(this);
						this._CreatorAccountId = value.AccountId;
					}
					else
					{
						this._CreatorAccountId = default(int);
					}
					this.SendPropertyChanged("Account1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Gift2", Storage="_Account2", ThisKey="TargetAccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account2
		{
			get
			{
				return this._Account2.Entity;
			}
			set
			{
				Account previousValue = this._Account2.Entity;
				if (((previousValue != value) 
							|| (this._Account2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account2.Entity = null;
						previousValue.Gifts2.Remove(this);
					}
					this._Account2.Entity = value;
					if ((value != null))
					{
						value.Gifts2.Add(this);
						this._TargetAccountId = value.AccountId;
					}
					else
					{
						this._TargetAccountId = default(int);
					}
					this.SendPropertyChanged("Account2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Gift = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Gift = null;
		}
		
		private void attach_GiftQuestions(GiftQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Gift = this;
		}
		
		private void detach_GiftQuestions(GiftQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Gift = null;
		}
	}
}
#pragma warning restore 1591
